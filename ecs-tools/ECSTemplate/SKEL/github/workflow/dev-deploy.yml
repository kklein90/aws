name: DevBuildDeploy test
env:
  IMAGEDID: image_id
  TAG: tag

on:
  workflow_dispatch:

  push:
        branches:
            - dev
            - aws

jobs:
  runtests:
    runs-on: [self-hosted, Linux]
    steps:
      - uses: actions/checkout@v4
      - name: Run tests
        run: |
          export tag=`git describe --exact-match --tags $(git log -n1 --pretty='%h')`
          echo "Running on checked out tag: $tag"
          echo "tag=${tag}" >> "$GITHUB_ENV"

      - name: SecretsCheck
        run: grep -qRP '(?<![A-Z0-9])[A-Z0-9]{20}(?![A-Z0-9])' * && echo "AWS Secret Key Found!" && exit 1 || true

  devbuilddeploy:
    name: DevDockerBuild
    needs: runtests
    runs-on: [self-hosted, Linux]
    steps:
      - name: build-image
        id: build-image
        run: |
          echo "*** setup some env variables"
          export REV=`echo $GITHUB_SHA | /usr/bin/cut -c1-7` && echo $BUILD > build.ver
          # this fails if not building off of a tag
          # export tag=`git describe --exact-match --tags $(git log -n1 --pretty='%h')`  ### no tags yet
          export tag=$REV
          export tag2=$(git log -n 1 --pretty='%h')
          export ECR="228923425684.dkr.ecr.us-east-1.amazonaws.com"
          export repo="TEMPLATE_REPO"

          echo "*** log in to ECR"
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR

          echo "*** get runtime env varbs from ssm"
          while read line; do
            export $line
          done <  <(aws ssm get-parameters --with-decryption --names TEMPLATE_SSM_PARAM --query "Parameters[*].Value" --output text)

          echo "*** running docker build"
          sudo docker build -t ${ECR}/${repo}:${tag} --build-arg PORT=${PORT} . || exit
          echo -e "adding additional tag info - $tag2"
          sudo docker tag ${ECR}/${repo}:${tag} ${ECR}/${repo}:${tag2}

          echo -e "*** Pushing tagged images to $ECR --> $repo"
          docker push ${ECR}/${repo}:${tag}
          docker push ${ECR}/${repo}:${tag2}

          echo "*** saving image id ${ECR}/${repo}:${tag} for next step"
          echo "image_id=${ECR}/${repo}:${tag}" >> $GITHUB_ENV

          echo "*** prepare task-definition template"
          sed -i "s/CONTAINERNAME/TEMPLATE_CONTAINER_NAME/" .github/workflows/files/task-definition.json
          sed -i "s,IMAGE,${ECR}/${repo}:latest,g" .github/workflows/files/task-definition.json
          sed -i "s/FAMILY/TEMPLATE_CONTAINER_NAME/" .github/workflows/files/task-definition.json
          sed -i "s,LOGGROUP,TEMPLATE_LOGGROUP," .github/workflows/files/task-definition.json
          sed -i "s/REGION/us-east-1/" .github/workflows/files/task-definition.json
          sed -i "s/ENV/TEMPLATE_ENVIRONMENT/" .github/workflows/files/task-definition.json
          sed -i "s/ACCOUNT/TEMPLATE_ENVIRONMENT/" .github/workflows/files/task-definition.json
          sed -i "s,ROLE,TEMPLATE_ECS_ROLE,g" .github/workflows/files/task-definition.json
          TEMPLATE_SED_VARIABLES


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          disable-retry: true
          output-credentials: true

      - name: Update ECS Task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/workflows/files/task-definition.json
          container-name: TEMPLATE_CONTAINER_NAME
          image: ${{env.image_id}}

      - name: Deploy ECS task def to dev
        id: deploy-dev
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          service: TEMPLATE_ECS_SVC_NAME
          cluster: TEMPLATE_CLUSTER_NAME
          wait-for-service-stability: true







